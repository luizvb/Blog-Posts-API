<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="0.2100" tests="13" failures="4">
  <testsuite name="Root Suite" timestamp="2022-05-06T14:37:19" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="blog_posts_api_medium" timestamp="2022-05-06T14:37:19" tests="13" file="/Users/luizneto/Documents/luiz/3df34061-3ed7-44f5-bfa5-4b44a6b78a0f/test/index.spec.js" time="0.2100" failures="4">
    <testcase name="blog_posts_api_medium should create a published post" time="0.0390" classname="should create a published post">
      <failure message="Cannot read properties of undefined (reading &apos;should&apos;)" type="TypeError"><![CDATA[TypeError: Cannot read properties of undefined (reading 'should')
    at Context.<anonymous> (test/index.spec.js:74:23)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)]]></failure>
    </testcase>
    <testcase name="blog_posts_api_medium should create an unpublished post" time="0.0070" classname="should create an unpublished post">
    </testcase>
    <testcase name="blog_posts_api_medium should fetch all the posts" time="0.0330" classname="should fetch all the posts">
      <failure message="Cannot read properties of null (reading &apos;should&apos;)" type="TypeError"><![CDATA[TypeError: Cannot read properties of null (reading 'should')
    at /Users/luizneto/Documents/luiz/3df34061-3ed7-44f5-bfa5-4b44a6b78a0f/test/index.spec.js:93:22
    at Array.forEach (<anonymous>)
    at Context.<anonymous> (test/index.spec.js:91:24)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)]]></failure>
    </testcase>
    <testcase name="blog_posts_api_medium should fetch all the posts if the isPublished filter value does not exist" time="0.0240" classname="should fetch all the posts if the isPublished filter value does not exist">
    </testcase>
    <testcase name="blog_posts_api_medium should fetch all posts for an author" time="0.0240" classname="should fetch all posts for an author">
    </testcase>
    <testcase name="blog_posts_api_medium should fetch no posts if author filter value does not exist" time="0.0190" classname="should fetch no posts if author filter value does not exist">
    </testcase>
    <testcase name="blog_posts_api_medium should fetch all published posts for an author" time="0.0190" classname="should fetch all published posts for an author">
      <failure message="expected [ Array(2) ] to deeply equal [ Array(1) ]" type="AssertionError"><![CDATA[AssertionError: expected [ Array(2) ] to deeply equal [ Array(1) ]
    at Context.<anonymous> (test/index.spec.js:125:39)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)]]></failure>
    </testcase>
    <testcase name="blog_posts_api_medium should fetch all unpublished posts for an author" time="0.0170" classname="should fetch all unpublished posts for an author">
      <failure message="expected [ Array(2) ] to deeply equal [ Array(1) ]" type="AssertionError"><![CDATA[AssertionError: expected [ Array(2) ] to deeply equal [ Array(1) ]
    at Context.<anonymous> (test/index.spec.js:132:39)
    at processTicksAndRejections (node:internal/process/task_queues:96:5)]]></failure>
    </testcase>
    <testcase name="blog_posts_api_medium should fetch a single post" time="0.0080" classname="should fetch a single post">
    </testcase>
    <testcase name="blog_posts_api_medium should get 404 if the post ID does not exist" time="0.0040" classname="should get 404 if the post ID does not exist">
    </testcase>
    <testcase name="blog_posts_api_medium should get 405 for a put request to /posts/:id" time="0.0050" classname="should get 405 for a put request to /posts/:id">
    </testcase>
    <testcase name="blog_posts_api_medium should get 405 for a patch request to /posts/:id" time="0.0060" classname="should get 405 for a patch request to /posts/:id">
    </testcase>
    <testcase name="blog_posts_api_medium should get 405 for a delete request to /posts/:id" time="0.0050" classname="should get 405 for a delete request to /posts/:id">
    </testcase>
  </testsuite>
</testsuites>